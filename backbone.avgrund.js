//@ sourceMappingURL=backbone.avgrund.map
// Generated by CoffeeScript 1.6.1
/*

  Backbone.Avgrund

  2013 (c) Andrey Popp <8mayday@gmail.com>

  Inspired by Avgrund modal concept by @hakimel

  2012 (c) Hakim El Hattab <http://hakim.se>

  MIT Licensed
*/

var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(root, factory) {
  var Backbone, _;
  if (typeof exports === 'object') {
    _ = require('underscore');
    Backbone = require('backbone');
    return module.exports = factory(_, Backbone, require);
  } else if (typeof define === 'function' && define.amd) {
    return define(function(require) {
      _ = require('underscore');
      Backbone = require('backbone');
      return root.Backbone.Avgrund = factory(_, Backbone, require);
    });
  } else {
    return root.Backbone.Avgrund = factory(root._, root.Backbone);
  }
})(this, function(_arg, _arg1, require) {
  var $, $nodify, Avgrund, View, isString;
  isString = _arg.isString;
  View = _arg1.View, $ = _arg1.$;
  $nodify = function(node) {
    var $nodes, part, parts, _i, _len;
    if (!isString(node)) {
      return $(node);
    }
    parts = $.parseHTML(node);
    $nodes = $();
    for (_i = 0, _len = parts.length; _i < _len; _i++) {
      part = parts[_i];
      $nodes = $nodes.add($(part));
    }
    return $nodes;
  };
  return Avgrund = (function(_super) {

    __extends(Avgrund, _super);

    Avgrund.prototype.$cover = $nodify('<div></div>');

    Avgrund.prototype.$document = void 0;

    function Avgrund() {
      Avgrund.__super__.constructor.apply(this, arguments);
      this.$el.addClass('avgrund-popup');
      this.$cover = $nodify(this.$cover);
      this.$cover.addClass('avgrund-cover');
    }

    Avgrund.prototype.ensureReferences = function() {
      if (!this.$document) {
        this.$document = $(document.documentElement).addClass('avgrund-ready');
      }
      if (!this.$body) {
        return this.$body = $(document.body);
      }
    };

    Avgrund.prototype.markContents = function() {
      return this.$el.parents().add(this.$el).siblings().addClass('avgrund-contents');
    };

    Avgrund.prototype.unmarkContents = function() {
      return this.$el.parents().add(this.$el).siblings().removeClass('avgrund-contents');
    };

    Avgrund.prototype.show = function() {
      var _this = this;
      this.ensureReferences();
      this.$document.on({
        'keyup.avgrund': this.onDocumentKeyUp.bind(this),
        'click.avgrund': this.onDocumentClick.bind(this),
        'touchstart.avgrund': this.onDocumentClick.bind(this)
      });
      this.markContents();
      this.$body.append(this.$cover);
      setTimeout(function() {
        _this.$el.addClass('avgrund-popup-animate');
        _this.$document.addClass('avgrund-active');
        return _this.trigger('show');
      });
      return this;
    };

    Avgrund.prototype.hide = function() {
      var _this = this;
      this.ensureReferences();
      this.$document.off('.avgrund');
      this.$document.removeClass('avgrund-active');
      this.$document.one('webkitTransitionEnd msTransitionEnd transitionend', function() {
        _this.$cover.detach();
        _this.unmarkContents();
        _this.$el.removeClass('avgrund-popup-animate');
        return _this.trigger('hide');
      });
      return this;
    };

    Avgrund.prototype.onDocumentKeyUp = function(e) {
      if (e.keyCode === 27) {
        return this.hide();
      }
    };

    Avgrund.prototype.onDocumentClick = function(e) {
      if ($(e.target).is(this.$cover)) {
        return this.hide();
      }
    };

    return Avgrund;

  })(View);
});
